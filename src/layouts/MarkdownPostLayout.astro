---
import Header from "../components/Header.astro";

const { frontmatter } = Astro.props;

// 获取当前文章路径
const currentPath = Astro.url.pathname;
// 提取当前文章所在目录
const currentDir = currentPath.substring(0, currentPath.lastIndexOf('/'));
// 解码当前目录路径
const decodedCurrentDir = decodeURIComponent(currentDir);
// 获取所有文章
const allPosts = await Astro.glob('../pages/posts/**/*.md');
// 调试输出
// console.log("当前路径:", currentPath);
// console.log("当前目录:", currentDir);
// console.log("解码后的当前目录:", decodedCurrentDir);
// console.log("找到的文章数量:", allPosts.length);

// 筛选出同目录的文章
const sameDirPosts = allPosts
  .filter(post => {
    // 确保post.url存在
    if (!post.url) {
      console.log("文章没有URL:", post.file);
      return false;
    }
    
    // 获取文章的目录部分
    const postDir = post.url.substring(0, post.url.lastIndexOf('/'));
    const decodedPostDir = decodeURIComponent(postDir);
    
    // 提取路径的最后一部分进行比较（更健壮的方法）
    const postDirSegments = decodedPostDir.split('/').filter(Boolean);
    const currentDirSegments = decodedCurrentDir.split('/').filter(Boolean);
    
    // 如果两个路径的最后一个段相同，则认为它们在同一目录
    const isSameDir = postDirSegments.length > 0 && 
                      currentDirSegments.length > 0 && 
                      postDirSegments[postDirSegments.length - 1] === 
                      currentDirSegments[currentDirSegments.length - 1];
    
    // 调试输出（部署后可以注释掉）
    console.log(`文章: ${post.url}, 目录: ${decodedPostDir}, 当前目录: ${decodedCurrentDir}, 是否同目录: ${isSameDir}`);
    
    return isSameDir;
  })
  .sort((a, b) => new Date(b.frontmatter.pubDate).getTime() - new Date(a.frontmatter.pubDate).getTime());

console.log("同目录文章数量:", sameDirPosts.length);
---

<html lang="zh-CN">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>{frontmatter.title}</title>
  </head>
  <body>
    <Header />
    <div class="container">
      <!-- 左侧目录 -->
      <nav class="side-nav">
        <div class="nav-tree">
          <h3>同目录文章</h3>
          <ul>
            {sameDirPosts.map(post => (
              <li>
                <a 
                  href={post.url} 
                  class={post.url === currentPath ? 'active' : ''}
                >
                  {post.frontmatter.title}
                </a>
              </li>
            ))}
          </ul>
          <slot name="nav" />
        </div>
      </nav>

      <!-- 中间内容区 -->
      <article class="post-content">
        <h1>{frontmatter.title}</h1>
        <div class="post-meta">
          <p>{frontmatter.pubDate.toString().slice(0,10)}</p>
          <p><em>{frontmatter.description}</em></p>
        </div>
        <div class="content">
          <slot />
        </div>
      </article>

      <!-- 右侧大纲 -->
      <aside class="toc">
        <div class="toc-container">
          <h3>目录</h3>
          <div id="toc-content"></div>
        </div>
      </aside>
    </div>
  </body>
</html>

<style>
  .container {
    display: grid;
    grid-template-columns: 250px minmax(auto, 700px) 300px;
    gap: 2rem;
    max-width: 100%;
    margin: 0 auto;
  }

  html {
    background: #f8fafc;  /* 更浅的背景色 */
    color: #475569;
  }

  .side-nav {
    visibility: visible !important;
    position: sticky;
    top: 2rem;
    height: calc(100vh - 4rem);
    overflow-y: auto;
    padding: 1rem;
    border-right: 1px solid #eee;
  }

  .post-content {
    font-size: 1.0rem;
    line-height: 1.8;
    width: 700px;
    margin: 0 auto;
  }

  .toc {
    position: sticky;
    top: 2rem;
    height: calc(100vh - 4rem);
    overflow-y: auto;
    padding-left: 1rem;
    width: 300px;  /* 添加固定宽度 */
  }

  .toc-container {
    padding: 1.5rem;  /* 增加内边距 */
    border-left: 1px solid #eee;
    height: 100%;    /* 确保容器占满高度 */
  }

  /* 优化目录标题样式 */
  .toc-container h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.2rem;
    color: #374151;
  }

  /* 左侧目录树样式 */
  .nav-tree {
    font-size: 0.9rem;
  }

  .nav-tree h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.2rem;
    color: #374151;
  }

  .nav-tree ul {
    list-style: none;
    padding-left: 0.5rem;
    margin-bottom: 2rem;
  }

  .nav-tree li {
    margin: 0.5rem 0;
  }

  .nav-tree a {
    display: block;
    padding: 0.5rem;
    color: #666;
    text-decoration: none;
    transition: all 0.2s;
    border-radius: 4px;
  }

  .nav-tree a:hover {
    color: #3b82f6;
    background-color: rgba(59, 130, 246, 0.05);
  }

  .nav-tree a.active {
    color: #3b82f6;
    background-color: rgba(59, 130, 246, 0.1);
    font-weight: 500;
  }

  .nav-tree :global(ul) {
    list-style: none;
    padding-left: 1.2rem;
  }

  .nav-tree :global(li) {
    margin: 0.5rem 0;
  }

  .nav-tree :global(a) {
    color: #666;
    text-decoration: none;
    transition: color 0.2s;
  }

  .nav-tree :global(a:hover) {
    color: #3b82f6;
  }
</style>

<script>
  // 生成目录
  document.addEventListener('DOMContentLoaded', () => {
    const article = document.querySelector('.content');
    const tocContent = document.querySelector('#toc-content');
    
    if (article && tocContent) {
      const headings = article.querySelectorAll('h2, h3, h4');
    
      if (headings.length === 0) {
        tocContent.innerHTML = '<p>本文没有目录</p>';
        return;
      }
      
      const toc = document.createElement('ul');
      
      headings.forEach((heading, index) => {
        const id = `heading-${index}`;
        heading.id = id;
        
        const li = document.createElement('li');
        const a = document.createElement('a');
        
        a.href = `#${id}`;
        a.textContent = heading.textContent;
        a.style.paddingLeft = `${(heading.tagName.charAt(1) - 2) * 1}rem`;
        
        li.appendChild(a);
        toc.appendChild(li);
      });
      
      tocContent.appendChild(toc);
    } else {
      console.error("TOC 生成失败", {
        articleSelector: '.content',
        tocContentSelector: '#toc-content'
      });
    }
  });
</script>

<style is:global>
  #toc-content ul {
    list-style: none;
    padding: 0;
  }

  #toc-content a {
    display: block;
    padding: 0.3rem 0;
    color: #666;
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.2s;
  }

  #toc-content a:hover {
    color: #3b82f6;
  }

  /* 添加图片样式 */
  .content img {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 1.5rem auto;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  /* 大图片点击放大效果 */
  .content img:hover {
    cursor: zoom-in;
    transform: scale(1.01);
    transition: transform 0.2s ease;
  }
  
  /* 现代化代码块样式 */
  .content pre {
    position: relative;
    background-color: #f8f9fa;
    border-radius: 8px;
    margin: 1.5rem 0;
    padding: 0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }
  
  .content pre::before {
    content: '';
    height: 24px;
    background: #f0f0f0;
    display: block;
    border-bottom: 1px solid #e0e0e0;
    border-radius: 8px 8px 0 0;
  }
  
  .content pre::after {
    content: '';
    position: absolute;
    top: 8px;
    left: 10px;
    width: 12px;
    height: 12px;
    background-color: #ff5f56;
    border-radius: 50%;
    box-shadow: 20px 0 0 #ffbd2e, 40px 0 0 #27c93f;
  }
  
  .content pre code {
    display: block;
    padding: 1rem;
    counter-reset: line;
    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
    font-size: 0.9rem;
    line-height: 1.5;
    overflow-x: auto;
  }

  /* 引用块样式 */
  .content blockquote {
    margin: 1.5rem 0;
    padding: 1rem 1.5rem;
    border-left: 4px solid #3b82f6;
    background-color: #f8fafc;
    border-radius: 0 8px 8px 0;
    color: #4a5568;
    font-style: italic;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .content blockquote p {
    margin: 0;
    line-height: 1.7;
  }

  .content blockquote p:last-child {
    margin-bottom: 0;
  }

  /* 嵌套引用样式 */
  .content blockquote blockquote {
    margin: 1rem 0;
    border-left-color: #64748b;
  }

  /* 行内代码样式 */
  .content code:not(pre code) {
    padding: 0.2em 0.4em;
    margin: 0;
    font-size: 0.85em;
    background-color: rgba(175, 184, 193, 0.2);
    border-radius: 6px;
    font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;
  }

  .content code:not(pre code)::before,
  .content code:not(pre code)::after {
    /* content: '`'; */
    color: #6e7781;
  }

  /* 确保行内代码在链接中的样式 */
  .content a code:not(pre code) {
    color: inherit;
  }

  /* 行内代码悬停效果 */
  .content code:not(pre code):hover {
    background-color: rgba(175, 184, 193, 0.3);
  }
</style>

<script>
  // 添加图片点击放大功能
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.content img');
    
    images.forEach(img => {
      img.addEventListener('click', () => {
        if (document.fullscreenElement) {
          document.exitFullscreen();
        } else {
          img.requestFullscreen();
        }
      });
    });
  })
</script>
