---
import BaseLayout from '../../layouts/BaseLayout.astro';

const posts = await Astro.glob('/src/pages/posts/**/*.md');
---

<BaseLayout title="编程">
  <div class="container">
    <div class="file-explorer" id="fileExplorer">
      {/* 文件树内容保持不变 */}
      {(() => {
        const fileTree = {};

        // 直接使用已经解析的 posts 数据
        posts.forEach(post => {
          const path = post.file.split('posts/')[1];
          if(!path.startsWith('thinking/')) {
            const parts = path.split('/');
            let current = fileTree;
            
            for(let i = 0; i < parts.length - 1; i++) {
              if(!current[parts[i]]) {
                current[parts[i]] = {};
              }
              current = current[parts[i]];
            }
            
            const fileName = parts[parts.length - 1];
            current[fileName] = post.url;
          }
        });

        // 递归渲染文件树
        // 修改渲染树的部分
        const renderTree = (tree) => {
          return Object.entries(tree).map(([key, value]) => {
            if(typeof value === 'object') {
              return (
                <div class="folder">
                  <div class="folder-name">{key}</div>
                  <div class="folder-content">
                    {renderTree(value)}
                  </div>
                </div>
              );
            } else {
              return (
                <a href={value} class="file">
                  {key.replace('.md', '')}
                </a>
              );
            }
          });
        };

        return renderTree(fileTree);
      })()}
    </div>
    <div class="content">
      <h1>这里是编程相关的内容导航</h1>
    </div>
  </div>
</BaseLayout>

<script>
  // 等待 DOM 加载完成
  document.addEventListener('DOMContentLoaded', () => {
    const fileExplorer = document.getElementById('fileExplorer');
    
    fileExplorer.addEventListener('click', (e) => {
      const folderName = e.target.closest('.folder-name');
      if (folderName) {
        const folder = folderName.parentElement;
        folder.classList.toggle('open');
      }
    });
  });
</script>

<style>
  .container {
    display: flex;
    margin: -1rem;  /* 抵消 BaseLayout 的 padding */
  }

  .content {
    flex: 1;
    padding: 2rem;
  }

  .file-explorer {
    width: 300px;
    height: calc(100vh - 60px);
    padding: 1.5rem;
    border-right: 1px solid #eee;
    background: #f8fafc;
    position: sticky;
    top: 0;
    overflow-y: auto;
  }

  .folder {
    cursor: pointer;
    user-select: none;
    margin: 0.5rem 0;
  }

  .folder-content {
    margin-left: 1.5rem;
    display: none;
    border-left: 2px solid #e5e7eb;
    padding-left: 1rem;
  }

  .file {
    display: block;
    padding: 0.4rem 0.6rem;
    margin: 0.3rem 0;
    color: #4b5563;
    text-decoration: none;
    border-radius: 4px;
    transition: all 0.2s;
    font-size: 1.1rem;
  }

  .folder-name {
    display: flex;
    align-items: center;
    padding: 0.4rem 0.6rem;
    border-radius: 4px;
    transition: all 0.2s;
    font-size: 1.1rem;
  }

  .folder-name::before {
    content: "📁";
    margin-right: 0.5rem;
  }

  .file::before {
    content: "📄";
    margin-right: 0.5rem;
  }

  .folder.open > .folder-name::before {
    content: "📂";
  }

  .folder.open > .folder-content {
    display: block;
    animation: slideDown 0.2s ease-out;
  }

  /* 悬停效果 */
  .file:hover, .folder-name:hover {
    background: #e5e7eb;
    color: #1e40af;
    transform: translateX(4px);
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>